/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.DoctorRole;

import GlobalEcoSystem.EcoSystem;
import GlobalEcoSystem.Enterprise.Enterprise;
import GlobalEcoSystem.Network.Network;
import GlobalEcoSystem.Org.HealthCareOrganization;
import GlobalEcoSystem.Org.Org;
import GlobalEcoSystem.Org.OrganizationDirectory;
import GlobalEcoSystem.UserAccount.UserAccount;
import GlobalEcoSystem.WorkQueue.DoctorWorkRequest;
import GlobalEcoSystem.WorkQueue.WorkRequest;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


public class HealthCheckupProcessPortal extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
     private OrganizationDirectory od;
    private HealthCareOrganization docorg;
    /**
     * Creates new form HealthCheckupProcessPortal
     */
    public HealthCheckupProcessPortal(JPanel userProcessContainer,
                                      UserAccount userAccount,
                                      EcoSystem business, Org organization, Enterprise enterprise, Network network) {
        initComponents();
        this.userAccount = userAccount;
        this.od = od;
         this.docorg = (HealthCareOrganization)organization;
         this.business =business;
         populateRequestTable();
//         populatePatientCombo();
//         populatePrescription();
    }
    public void populateRequestTable()
    {
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy"); 
        model.setRowCount(0);       
        for(WorkRequest request : business.getWorkQueue().getWorkRequestList()){
              if(request instanceof DoctorWorkRequest){
                  if(userAccount.getEmployee().getName().equalsIgnoreCase(((DoctorWorkRequest) request).getSpec())){
                    Object[] row = new Object[4];
                    row[0] = ((DoctorWorkRequest) request).getPerson().getName();
                    row[1] = ((DoctorWorkRequest) request).getDate();
                    row[2] = ((DoctorWorkRequest) request).getTime();
                    row[3] = ((DoctorWorkRequest) request);
                    model.addRow(row);
              }
        }
        }
    }
//    public void populatePatientCombo(){
//        comboJPatient.removeAllItems();
//         for(WorkRequest request : business.getWorkQueue().getWorkRequestList()){
//              if(request instanceof DoctorWorkRequest){ 
//                  if(userAccount.getEmployee().getName().equalsIgnoreCase(((DoctorWorkRequest) request).getSpec())){
//                  if(((DoctorWorkRequest) request).getDocstatus().equalsIgnoreCase("Request Accepted"))
//                  {
//                    comboJPatient.addItem(((DoctorWorkRequest) request).getPerson().getName());       
//                  }
//                  }
//                  
//              }}
//    
//    }
//    public void populatePrescription(){
//    DefaultTableModel model = (DefaultTableModel) JtblMedOrder.getModel();
//        model.setRowCount(0);
//        for (POrder porder : this.business.getpOrderDirectory().getOrderDirectory()){
//        //System.out.println("Order" + porder.getOrderId());
//        try {
//        if(userAccount.getEmployee().getName().equals(porder.getDoctor().getName())) {
//            Object[] row = new Object[7];
//            row[0] = porder;
//            row[2] = porder.getMenu().getItemName();
//            row[4] = porder.getQuantity() * porder.getMenu().getPrice();
//            row[5] = porder.getPharmacy().getPharmName();
//            row[1] = porder.getPerson().getName();
//            row[6] = porder.getOrderStatus();
//            row[3] = porder.getQuantity();
//          //  row[7] = order.getTime().toString();
//            model.addRow(row);
//    }
//        }
//        catch (Exception e) {
//            //System.out.println(e.toString());
//        }
//        }
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        DoctorWorkArea = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        acceptButton = new javax.swing.JButton();
        JprocessButton = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(36, 35, 39));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DoctorWorkArea.setBackground(new java.awt.Color(255, 255, 255));
        DoctorWorkArea.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 36)); // NOI18N
        DoctorWorkArea.setForeground(new java.awt.Color(255, 255, 255));
        DoctorWorkArea.setText("Health Checkup Process Portal");
        jPanel1.add(DoctorWorkArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, -1, -1));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Schedule Time", "Schedule Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 873, 100));

        acceptButton.setBackground(new java.awt.Color(0, 102, 204));
        acceptButton.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        acceptButton.setForeground(new java.awt.Color(255, 255, 255));
        acceptButton.setText("Accept");
        acceptButton.setBorderPainted(false);
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });
        jPanel1.add(acceptButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, -1, -1));

        JprocessButton.setBackground(new java.awt.Color(0, 102, 204));
        JprocessButton.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        JprocessButton.setForeground(new java.awt.Color(255, 255, 255));
        JprocessButton.setText("Completed");
        JprocessButton.setBorderPainted(false);
        JprocessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JprocessButtonActionPerformed(evt);
            }
        });
        jPanel1.add(JprocessButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 290, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void JprocessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JprocessButtonActionPerformed
        // TODO add your handling code here:
        try{
            int selectedRow = workRequestJTable.getSelectedRow();

            if (selectedRow < 0){
                JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            DoctorWorkRequest request = (DoctorWorkRequest) workRequestJTable.getValueAt(selectedRow, 3);
            if(request.getReceiver()!=null)
            {
                //JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
                //return;
            }
            if(request.getDocstatus().equalsIgnoreCase("Appointment Completed")){
                JOptionPane.showMessageDialog(null, "Already completed");
                //return;
            }
            if(request.getDocstatus().equalsIgnoreCase("Doctor Requested")){
                JOptionPane.showMessageDialog(null, "Accept the patient first");
                return;
            }
            request.setReceiver(userAccount);
            request.setDocstatus("Appointment Completed");
            populateRequestTable();
//            populatePatientCombo();
        }catch(Exception e){
        }
    }//GEN-LAST:event_JprocessButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 3);
        DoctorWorkRequest request = (DoctorWorkRequest) workRequestJTable.getValueAt(selectedRow, 3);
        if(request.getReceiver()!=null)
        {
            //JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
            //return;
        }
        if(request.getDocstatus().equalsIgnoreCase("Appointment Completed")){
            JOptionPane.showMessageDialog(null, "Patient appointment already completed");
            return;
        }
        if(request.getDocstatus().equalsIgnoreCase("Request Accepted")){
            JOptionPane.showMessageDialog(null, "Patient already accepted. You can prescribe medicine or complete the appointment");
            //return;
        }
        request.setReceiver(userAccount);
        request.setDocstatus("Request Accepted");
        populateRequestTable();
//        populatePatientCombo();
        //populatePharmaCombo();
    }//GEN-LAST:event_acceptButtonActionPerformed
//    public void populatePharmaCombo(){
//        comboPharma.removeAllItems();
//        int patientCount = comboJPatient.getItemCount();
//        if(patientCount != 0){
//        for(Pharmacy ph: business.getPharmacyDirectory().getPharmacyDirectory()){
//        comboPharma.addItem(ph.getPharmName());
//        }
//        }
//}
//    public void populateMedCombo(){
//        comboJMedicine.removeAllItems();
//        int patientCount = comboJPatient.getItemCount();
//        if(patientCount != 0){
//       try {
//        String pharma = comboPharma.getSelectedItem().toString();  //pharmacy
//        if(pharma != null){ 
//        for(PMenu pmenu: business.getpMenuDirectory().getPmenuDirectory()){
//            if(pharma.equalsIgnoreCase(pmenu.getPharmaName())){
//        comboJMedicine.addItem(pmenu.toString());
//            }
//        }
//        }
//    }catch (Exception e) {
//        comboJMedicine.removeAllItems();
//            //System.out.println(e.toString());
//        }
//        }
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DoctorWorkArea;
    private javax.swing.JButton JprocessButton;
    private javax.swing.JButton acceptButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
